from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from collections import defaultdict

from datetime import datetime, timedelta, timezone, time
from pathlib import Path
from db import save_booking, get_booking, delete_booking, get_all_bookings


IMG_PATH = Path(__file__).parent / "img" / "booking_img.png"
router = Router()

TABLES = {
    8: ["T8_1"],
    6: ["T6_1"],
    3: [f"T3_{i}" for i in range(1, 7)]
}



class Booking(StatesGroup):
    date = State()
    guests = State()
    time = State()
    name = State()
    phone = State()


async def find_next_available_slot(guests: int, selected_dt: datetime, all_bookings):
    tables = TABLES.get(guests)
    if not tables:
        return None, None

    bookings_by_table = defaultdict(list)
    selected_date = selected_dt.date()

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –±—Ä–æ–Ω–∏ –ø–æ —Å—Ç–æ–ª–∞–º
    for _, table, _, _, booking_at_str in all_bookings:
        booking_at = datetime.fromisoformat(booking_at_str).replace(tzinfo=timezone.utc)
        if booking_at.date() == selected_date:
            bookings_by_table[table].append(booking_at)

    for table_id in tables:
        occupied = bookings_by_table.get(table_id, [])
        occupied.sort()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ—Ç–∞
        slot_start = selected_dt
        slot_end = slot_start + timedelta(hours=2)

        conflict = any(
            not (b + timedelta(hours=2) <= slot_start or b >= slot_end)
            for b in occupied
        )
        if not conflict:
            return table_id, selected_dt

        # –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ –ø–æ–∑–∂–µ
        test_start = max(slot_end, max(occupied) + timedelta(minutes=30) if occupied else slot_start)
        while test_start.hour < 23:
            test_end = test_start + timedelta(hours=2)
            if all(
                b + timedelta(hours=2) <= test_start or b >= test_end
                for b in occupied
            ):
                return table_id, test_start
            test_start += timedelta(minutes=30)

    return None, None



@router.message(F.text == "/start")
async def send_welcome(msg: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª")],
            [KeyboardButton(text="–ú–æ–∏ –±—Ä–æ–Ω–∏")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    await msg.answer("–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ù–∞ —Å–≤—è–∑–∏ –ú–µ—Ç–µ–æ—Ä–∏—Ç, –≤ —ç—Ç–æ–º –±–æ—Ç–µ –º–æ–∂–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–π—Å—Ç–≤—É—é—â–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ?",\
                    reply_markup=keyboard)


@router.message(F.text == "–ú–æ–∏ –±—Ä–æ–Ω–∏")
async def my_bookings(msg: Message):
    bookings = await get_booking(msg.from_user.id)
    if not bookings:
        await msg.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–µ–π.")
        return

    text = "üìù –¢–≤–æ–∏ –±—Ä–æ–Ω–∏:\n\n"
    for booking in bookings:
        # –µ—Å–ª–∏ get_booking –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (id, table, time, name, created_at, booking_at)
        booking_id, table, time, name, created_at, booking_at = booking
        booking_fmt = datetime.fromisoformat(booking_at).strftime("%d.%m.%Y")
        text = (
            f"üìÖ –î–∞—Ç–∞: {booking_fmt}\n"
            f"ü™ë –°—Ç–æ–ª {table} –Ω–∞ {time}\n"
            f"üë§ –ò–º—è: {name}"
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{booking_id}")]
            ]
        )
        await msg.answer(text, reply_markup=keyboard)


@router.callback_query(F.data.startswith("cancel_"))
async def cancel_booking(callback: CallbackQuery, bot):
    booking_id = int(callback.data.split("_")[1])

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bookings = await get_booking(callback.from_user.id)
    cancelled = None

    for b in bookings:
        b_id, table, time, name, created_at, booking_at = b
        if b_id == booking_id:
            cancelled = b
            break

    await delete_booking(booking_id)
    await callback.message.answer("–ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚úÖ")

    if cancelled:
        manager_chat_id = -4980377325
        booking_fmt = datetime.fromisoformat(cancelled[5]).astimezone(timezone(timedelta(hours=3))).strftime("%d.%m.%Y %H:%M")
        await bot.send_message(
            manager_chat_id,
            f"‚ùå –û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏:\n"
            f"üìÖ {booking_fmt}\n"
            f"üë• –ì–æ—Å—Ç–µ–π: {cancelled[1]}\n"
            f"üë§ –ò–º—è: {cancelled[3]}"
        )


# –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å —à–∞–≥–æ–º –≤ 1 —á–∞—Å
@router.message(F.text == "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª")
async def start_booking(msg: Message, state: FSMContext):
    await state.set_state(Booking.date)

    builder = InlineKeyboardBuilder()
    today = datetime.today()
    for i in range(14):
        date = today + timedelta(days=i)
        date_str = date.strftime("%d.%m.%Y")
        builder.button(text=date_str, callback_data=f"date_{date_str}")
    builder.adjust(2)

    await msg.answer("–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –±—Ä–æ–Ω–∏:", reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("date_"))
async def choose_date(callback: CallbackQuery, state: FSMContext):
    date_str = callback.data.replace("date_", "")
    await state.update_data(date=date_str)
    await state.set_state(Booking.guests)  # –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –¥–∞–ª—å—à–µ –∏–¥—ë—Ç –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ—Å—Ç–µ–π

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
    existing = await get_all_bookings()
    selected_date = datetime.strptime(date_str, "%d.%m.%Y").date()

    # –°–ª–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ —Å–∫—Ä—ã—Ç—å
    unavailable_slots = set()

    for record in existing:
        user_id, table, time_str, name, booking_at_str = record
        booking_at = datetime.fromisoformat(booking_at_str).replace(tzinfo=None)

        if booking_at.date() != selected_date:
            continue

        start = booking_at
        end = start + timedelta(hours=2)

        for hour in range(start.hour, end.hour + 1):
            for minute in [0, 30]:
                ts = datetime.combine(start.date(), time(hour, minute))
                if start <= ts < end:
                    unavailable_slots.add(ts.strftime("%H:%M"))

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    builder = InlineKeyboardBuilder()
    for hour in range(9, 23):  # —Å 9:00 –¥–æ 22:30
        for minute in [0, 30]:
            time_str = f"{hour:02d}:{minute:02d}"
            if time_str in unavailable_slots:
                continue
            builder.button(text=time_str, callback_data=f"time_{time_str}")

    builder.adjust(3)

    await callback.message.answer("–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏:", reply_markup=builder.as_markup())




@router.callback_query(F.data.startswith("time_"))
async def choose_time(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤
    if "guests" not in data or "date" not in data:
        await callback.message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ: –≤—ã–±–µ—Ä–∏ –¥–∞—Ç—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π.")
        await state.set_state(Booking.date)
        return

    time_str = callback.data.split("_")[1]
    hour, minute = map(int, time_str.split(":"))
    
    guests = data['guests']
    date = data['date']
    selected_dt = datetime.strptime(date, "%d.%m.%Y").replace(hour=hour, minute=minute, tzinfo=timezone.utc)

    all_bookings = await get_all_bookings()
    table_id, slot_time = await find_next_available_slot(guests, selected_dt, all_bookings)

    if not table_id:
        await callback.message.answer("üòû –ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤ –Ω—É–∂–Ω–æ–π –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.")
        return

    if slot_time != selected_dt:
        time_suggested = slot_time.astimezone(timezone(timedelta(hours=3))).strftime("%H:%M")
        await callback.message.answer(
            f"‚ö†Ô∏è –ö—Ç–æ-—Ç–æ —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª —ç—Ç–æ—Ç —Å—Ç–æ–ª –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π.\n"
            f"–ë–ª–∏–∂–∞–π—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è: {time_suggested}"
        )
        return

    # –ï—Å–ª–∏ –≤—Ä–µ–º—è —Å–≤–æ–±–æ–¥–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
    await state.update_data(hour=hour, minute=minute, table_number=table_id)
    await state.set_state(Booking.name)
    await callback.message.answer("–ö–∞–∫ –∫ –≤–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è?")


@router.callback_query(F.data.startswith("table_"))
async def choose_table(callback: CallbackQuery, state: FSMContext):
    table_number = callback.data.split("_")[1]
    await state.update_data(table_number=table_number)
    await state.set_state(Booking.name)
    await callback.message.answer("–ö–∞–∫ –∫ –≤–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è?")


@router.message(Booking.name)
async def get_name(msg: Message, state: FSMContext):
    await state.update_data(name=msg.text)
    await state.set_state(Booking.phone)
    await msg.answer("–û—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏.")


@router.callback_query(F.data.startswith("guests_"))
async def get_guests(callback: CallbackQuery, state: FSMContext):
    guests = int(callback.data.replace("guests_", ""))
    await state.update_data(guests=guests)

    user_data = await state.get_data()
    if "date" not in user_data:
        await callback.message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
        await state.set_state(Booking.date)
        return

    await state.set_state(Booking.time)

    date_str = user_data["date"]
    selected_date = datetime.strptime(date_str, "%d.%m.%Y")
    now = datetime.now(timezone(timedelta(hours=3)))  # –ú–°–ö
    is_today = selected_date.date() == now.date()

    all_bookings = await get_all_bookings()
    blocked_slots = set()

    if guests == 8:
        for user_id, table, time, name, booking_at_str in all_bookings:
            booking_at = datetime.fromisoformat(booking_at_str).replace(tzinfo=timezone.utc)
            booking_at_local = booking_at.astimezone(timezone(timedelta(hours=3)))

            if booking_at_local.date() != selected_date.date():
                continue

            if int(table) == 8:  # –±—Ä–æ–Ω—å –Ω–∞ 8 –≥–æ—Å—Ç–µ–π
                for shift_minutes in range(-119, 120, 30):
                    blocked = (booking_at_local + timedelta(minutes=shift_minutes)).strftime("%H:%M")
                    blocked_slots.add(blocked)

    builder = InlineKeyboardBuilder()
    for hour in range(9, 24):
        for minute in [0, 30]:
            slot_time = selected_date.replace(hour=hour, minute=minute, tzinfo=timezone(timedelta(hours=3)))

            if is_today and slot_time <= now:
                continue

            time_str = f"{hour:02d}:{minute:02d}"
            if time_str in blocked_slots:
                continue  # ‚õîÔ∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è

            builder.button(text=time_str, callback_data=f"time_{time_str}")

    builder.adjust(3)

    if not builder.buttons:
        await callback.message.answer("üòû –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–µ–Ω—å.")
        await state.set_state(Booking.date)
        return

    await callback.message.answer("–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=builder.as_markup())


@router.message(Booking.phone)
async def get_phone(msg: Message, state: FSMContext):
    phone = msg.text
    await state.update_data(phone=phone)

    data = await state.get_data()
    time_str = f"{data['hour']:02d}:{data['minute']:02d}"

    # –£–¥–∞–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ choose_time
    await save_booking(
        user_id=msg.from_user.id,
        table_number=str(data["guests"]),
        time=time_str,
        name=data["name"],
        date=data["date"]
    )

    await msg.answer(
        f"–°–ø–∞—Å–∏–±–æ {str(data['name']).capitalize()}! –í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ {data['guests']} –≥–æ—Å—Ç–µ–π, {data['date']}, –≤ {time_str}.\n"
        f"–û—Ç–ª–∏—á–Ω—ã–π –æ—Ç–¥—ã—Ö —Ç–µ–ø–µ—Ä—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω! –•–æ—Ç–∏–º —Å–æ–æ–±—â–∏—Ç—å —á—Ç–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 2 —á–∞—Å–∞, "
        f"–µ—Å–ª–∏ —É –Ω–∞—Å –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø—Ä–æ–¥–ª–∏–º —ç—Ç–æ –≤—Ä–µ–º—è ü§ç"
    )

    manager_chat_id = -4980377325
    text = (
        f"üì¢ –ù–æ–≤–∞—è –±—Ä–æ–Ω—å!\n"
        f"üìÖ –î–∞—Ç–∞: {data['date']}\n"
        f"‚è∞ –í—Ä–µ–º—è: {time_str}\n"
        f"üë• –ö–æ–ª-–≤–æ –≥–æ—Å—Ç–µ–π: {data['guests']}\n"
        f"üë§ –ò–º—è: {str(data['name']).capitalize()}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
    )
    await msg.bot.send_message(chat_id=manager_chat_id, text=text)


