from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from datetime import datetime, timedelta, timezone
from pathlib import Path
from db import save_booking, get_booking, delete_booking, get_all_bookings

IMG_PATH = Path(__file__).parent / "img" / "booking_img.png"

router = Router()

class Booking(StatesGroup):
    date = State()
    time = State()
    table = State()
    name = State()
    phone = State()


@router.message(F.text == "/start")
async def send_welcome(msg: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª")],
            [KeyboardButton(text="–ú–æ–∏ –±—Ä–æ–Ω–∏")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    await msg.answer("–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ù–∞ —Å–≤—è–∑–∏ –º–µ—Ç–µ–æ—Ä–∏—Ç, –≤ —ç—Ç–æ–º –±–æ—Ç–µ –º–æ–∂–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–π—Å—Ç–≤—É—é—â–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ?",\
                    reply_markup=keyboard)


@router.message(F.text == "–ú–æ–∏ –±—Ä–æ–Ω–∏")
async def my_bookings(msg: Message):
    bookings = await get_booking(msg.from_user.id)

    if not bookings:
        await msg.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–µ–π.")
        return

    text = "üìù –¢–≤–æ–∏ –±—Ä–æ–Ω–∏:\n\n"
    for booking in bookings:
        # –µ—Å–ª–∏ get_booking –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (id, table, time, name, created_at, booking_at)
        booking_id, table, time, name, created_at, booking_at = booking
        booking_fmt = datetime.fromisoformat(booking_at).strftime("%d.%m.%Y")
        text = (
            f"üìÖ –î–∞—Ç–∞: {booking_fmt}\n"
            f"ü™ë –°—Ç–æ–ª {table} –Ω–∞ {time}\n"
            f"üë§ –ò–º—è: {name}"
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{booking_id}")]
            ]
        )
        await msg.answer(text, reply_markup=keyboard)



@router.callback_query(F.data.startswith("cancel_"))
async def cancel_booking(callback: CallbackQuery):
    booking_id = int(callback.data.split("_")[1])
    await delete_booking(booking_id)
    await callback.message.answer("–ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚úÖ")


# –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å —à–∞–≥–æ–º –≤ 1 —á–∞—Å
@router.message(F.text == "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª")
async def start_booking(msg: Message, state: FSMContext):
    await state.set_state(Booking.date)

    builder = InlineKeyboardBuilder()
    today = datetime.today()
    for i in range(14):
        date = today + timedelta(days=i)
        date_str = date.strftime("%d.%m.%Y")
        builder.button(text=date_str, callback_data=f"date_{date_str}")
    builder.adjust(2)

    await msg.answer("–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –±—Ä–æ–Ω–∏:", reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("date_"))
async def choose_date(callback: CallbackQuery, state: FSMContext):
    date_str = callback.data.replace("date_", "")
    await state.update_data(date=date_str)
    await state.set_state(Booking.time)

    builder = InlineKeyboardBuilder()
    for hour in range(9, 24):
        for minute in [0, 30]:
            time_str = f"{hour:02d}:{minute:02d}"
            builder.button(text=time_str, callback_data=f"time_{time_str}")
    builder.adjust(3)

    await callback.message.answer("–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏:", reply_markup=builder.as_markup())



@router.callback_query(F.data.startswith("time_"))
async def choose_time(callback: CallbackQuery, state: FSMContext):
    time_str = callback.data.split("_")[1]  # —Ñ–æ—Ä–º–∞—Ç "HH:MM"
    hour, minute = map(int, time_str.split(":"))
    await state.update_data(hour=hour, minute=minute)
    await state.set_state(Booking.table)

    user_data = await state.get_data()
    selected_date = datetime.strptime(user_data['date'], "%d.%m.%Y")
    current_datetime = selected_date.replace(hour=hour, minute=minute)
    current_datetime = current_datetime.replace(tzinfo=timezone.utc)  # üëà –¥–æ–±–∞–≤–∏–ª–∏

    existing = await get_all_bookings()
    unavailable = []
    for record in existing:
        user_id, table, time, name, booking_at_str = record
        booking_at = datetime.fromisoformat(booking_at_str)

        # üëá –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ tz-aware, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —Å—Ç—Ä–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å –±–µ–∑ tzinfo
        if booking_at.tzinfo is None:
            booking_at = booking_at.replace(tzinfo=timezone.utc)

        booking_start = booking_at
        booking_end = booking_at + timedelta(hours=2)

        new_start = current_datetime
        new_end = current_datetime + timedelta(hours=2)

        if booking_start.date() == new_start.date() and (new_start < booking_end and booking_start < new_end):
            unavailable.append(table)


    all_tables = ["13 –æ—Ç 6 —á–µ–ª–æ–≤–µ–∫", "16 –¥–æ 5 —á–µ–ª–æ–≤–µ–∫", "23 –¥–æ 2 –ª—é–¥–µ–π",
                  "17 –¥–æ 3 –ª—é–¥–µ–π", "18 –¥–æ 3 –ª—é–¥–µ–π", "19 –¥–æ 3 –ª—é–¥–µ–π", "20 –¥–æ 3 –ª—é–¥–µ–π", "22 –¥–æ 3 –ª—é–¥–µ–π"]
    available = [t for t in all_tables if t not in unavailable]

    if not available:
        await callback.message.answer("–ù–∞ —ç—Ç–æ –≤—Ä–µ–º—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É –∏–ª–∏ –≤—Ä–µ–º—è.")
        await state.set_state(Booking.time)
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"–°—Ç–æ–ª {t}", callback_data=f"table_{t[:2]}")] for t in available
        ]
    )
    await callback.message.answer(f"–í—ã–±–µ—Ä–∏ —Å—Ç–æ–ª –Ω–∞ {time_str}, {user_data['date']}:", reply_markup=keyboard)




@router.callback_query(F.data.startswith("table_"))
async def choose_table(callback: CallbackQuery, state: FSMContext):
    table_number = callback.data.split("_")[1]
    await state.update_data(table_number=table_number)
    await state.set_state(Booking.name)
    await callback.message.answer("–ö–∞–∫ –∫ –≤–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è?")


@router.message(Booking.name)
async def get_name(msg: Message, state: FSMContext):
    await state.update_data(name=msg.text)
    await state.set_state(Booking.phone)
    await msg.answer("–û—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏.")


@router.message(Booking.phone)
async def get_phone(msg: Message, state: FSMContext):
    phone = msg.text
    await state.update_data(phone=phone)

    data = await state.get_data()
    time_str = f"{data['hour']:02d}:{data['minute']:02d}"

    try:
        await save_booking(
            user_id=msg.from_user.id,
            table_number=data["table_number"],
            time=time_str,
            name=data["name"],
            date=data["date"]
        )
    except ValueError:
        await msg.answer("‚ö†Ô∏è –ö—Ç–æ-—Ç–æ —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª —ç—Ç–æ—Ç —Å—Ç–æ–ª –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π.")
        await state.clear()
        return

    await msg.answer(f"–ì–æ—Ç–æ–≤–æ! –°—Ç–æ–ª {data['table_number']} –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {time_str}. –î–æ –≤—Å—Ç—Ä–µ—á–∏, {data['name']}!\n"
                     f"–ë—Ä–æ–Ω—å –Ω–∞ —Å—Ç–æ–ª–∏–∫ –¥–ª–∏—Ç—å—Å—è 2 —á–∞—Å–∞!")
    await state.clear()

    manager_chat_id = -4980377325

    text = (
        f"üì¢ –ù–æ–≤–∞—è –±—Ä–æ–Ω—å!\n"
        f"üìÖ –î–∞—Ç–∞: {data['date']}\n"
        f"‚è∞ –í—Ä–µ–º—è: {time_str}\n"
        f"ü™ë –°—Ç–æ–ª: {data['table_number']}\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
    )

    await msg.bot.send_message(chat_id=manager_chat_id, text=text)
